/* Nous cassons (reset) l'effet d'héritage pour toutes les balises suceptible d'être concernées */
html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, sub, sup, tt, var,b, u, i, center, dl, dt, dd, ol, ul, li,fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
	text-decoration: none;
}

/* On faisant un reset, on ne nous impose rien; Ensuite, rien ne nous empeche de définir notre propre style et d'être maitre de nos choix */
h1{
text-align: center; /* alignement */
font-size: 20px; /* taille du texte */
font-weight: bold; /* gras */
margin: 10px 9px 8px 7px; /* marges ext.   dans l'odre de haut à droite en bas et à gauche */
padding: 20px; /* marges int.  avec un seul argument concerne haut/bas/droite/gauche */
border:1px solid red; /* bordure */
}

span{  /* En ajoutant une bordure dans la feuille css, nous voyons que cet élément ne prend que la place dont il a besoin, on dis qu'il est display inline. */
border: 1px solid;
text-align: center; /* /!\ l'alignement ne peut pas fonctionner car span est par défaut display inline - il est possible de lui ajouter la propriete display: block; */
}
div{  /* En ajoutant une bordure dans la feuille css, nous voyons que cet élément prend toute la place en largeur, on dis qu'il est display block. */
border: 1px solid green;
}
p{  /* En ajoutant une bordure dans la feuille css, nous voyons que cet élément prend toute la place en largeur, on dis qu'il est display block. */
border: 1px solid darkcyan;
}
/* 
Commentaire : certains éléments sont display block, d'autres sont display inline.
---------------------
MARGIN/PADDING :
	margin/padding: 10px 9px 8px 7px; 10px en haut - 9px à droite - 8px en bas - 7px à gauche
	margin/padding: 10px 7px; 10px en haut et en bas - 7px à gauche et à droite
	margin/padding: 10px 9px 8px; 10px en haut - 9px à droite - 8px en bas.
	margin/padding: 10px; 10px tout autour (haut, droite, bas, gauche).
	padding-top/margin-top: 10px; top en haut
	padding-right/margin-right: 10px; right à droite
	padding-bottom/margin-bottom: 10px; bottom en bas
	padding-left/margin-left: 10px; left à gauche
---------------------
plusieurs moyens de styliser un élément :
	par son id: #elem
	par sa classe: .elem
	par sa balise: balise
---------------------
Régle d'écriture :
	div.zone{} veut dire "va me chercher la div qui possède la classe 'zone'".
	div .zone{} veut dire "va me chercher la classe zone qui se trouve A L'INTERIEUR de la div (c'est l'espace qui change la signification).
	.maclasse, .maclasse2{} : il y a des virgules, on applique le style sur plusieurs éléments.
---------------------
*/

/*    Les principaux style

width   =>  largeur (en px , %  => par rapport au bloc parent , ou en vw => largeur de l'ecran de votre device) 

height => hauteur (en pixel ou en vh=> 100vh= 100% de la hauteur de votre ecran

border => bordure (3 paramètres: epaisseur en px, couleur par defaut noir, type de bordure par défaut entière)

color => couleur de la police d'écriture (soit en text anglais, sinon rgb => red/green/blue défini sur une echelle de 0 à 250 ou rgba => avec contraste, sinon en hexadecimale commençant par #)

background-color => couleur de fond

background-image => image de fond

// centrer un bloc
donner une largeur au bloc (ex: width: 50%)  puis appliquer 
margin: 0 auto (0 marges en haut et en bas , et marges auto à gauche et à droite) (ici rapport à l'exemple marges de 25% à gauche et à droite

// centrer du texte ou tout élément inline et inline-block 
text-align: center ( on peut aussi appliquer start ou end => au debut ou à la fin du bloc)

text-decoration  => heritage de style (ex: ul/li ou a)

opacity => opacité d'un bloc pour donner plus ou moins de transparence

display => comportement d'un élément (les principaux: block, inline, inline-block et flex)












*/